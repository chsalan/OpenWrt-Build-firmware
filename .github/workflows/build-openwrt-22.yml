#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

# 定义：工作流名称
name: Build OpenWrt - 22

# on:
#   label:
#     types:
#       - created

# env:
#   REPO_BRANCH: v22.03.5 --depth=1
#   CONFIG_FILE: 22-x86-xu.config

# include:
#   - jobs.yml

# jobs:
#   preinit:
#     steps:
#       - name: Print GitHub Actions version
#         run: echo "GitHub Actions version: ${{ github.action_version }}"
#   build:
#     extends: common.build

env:
  # 定义：配置文件
  # CONFIG_FILE: 22-x86-xu.config
  # 定义：openwrt的分支
  # REPO_BRANCH: v22.03.5 --depth=1
  # REPO_URL: https://github.com/openwrt/openwrt
  PACKAGE_REPO: chsalan/OpenWrt-Packages
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

# 触发条件
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      # ssh:
      #   description: 'SSH connection to Actions'
      #   required: true
      #   default: 'false'
      REPO_URL:
        description: 'OpenWrt url'
        required: true
        type: string
        default: 'https://github.com/openwrt/openwrt'
      REPO_BRANCH:
        description: 'OpenWrt branch'
        required: true
        type: string
        default: 'v22.03.5'
      CONFIG_FILE:
        description: 'Config file'
        required: true
        type: choice
        default: '22-x86-xu.config'
        options:
          - 22-x86-xu.config
          - 22-k3-lt.config
          - 22-k3-tt.config

# 编译
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:

    - name: Set environment variable
      run: |
        echo "REPO_URL=${{ github.event.inputs.REPO_URL }}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ github.event.inputs.REPO_BRANCH }}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${{ github.event.inputs.CONFIG_FILE }}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Get private repo - packages
      uses: actions/checkout@main
      with:
        repository: ${{ env.PACKAGE_REPO }}
        ref: main
        token: ${{ secrets.PAT }}
        path: alan

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH --depth=1 openwrt
        mv $GITHUB_WORKSPACE/alan /workdir/openwrt/package/
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      env:
        token: ${{ secrets.PERSONAL_TOKEN }}
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH


    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -d /workdir/openwrt/package/alan/files ] && mv /workdir/openwrt/package/alan/files openwrt/files
        [ -e /workdir/openwrt/package/alan/$CONFIG_FILE ] && mv /workdir/openwrt/package/alan/$CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        # echo "::set-output name=status::success"
        echo "COMPILE_STATUS=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      # The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files.
      # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands
      # if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      if: env.COMPILE_STATUS == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        # echo "::set-output name=status::success"
        echo "ORGANIZE_STATUS=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      # if: steps.organize.outputs.status == 'success' && !cancelled()
      if: env.ORGANIZE_STATUS == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      # if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      if: env.ORGANIZE_STATUS == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        # echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
        echo "COW_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      # if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      if: env.ORGANIZE_STATUS == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        # echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        echo "WE_URL=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")"  >> $GITHUB_OUTPUT
        touch release.txt
        # [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ env.COW_URL }})" >> release.txt
        # [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ env.WE_URL }})" >> release.txt
        # echo "::set-output name=status::success"
        echo "TAG_STATUS=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: env.TAG_STATUS == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # tag_name: ${{ steps.tag.outputs.release_tag }}
        tag_name: ${{ env.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 6

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 30
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}